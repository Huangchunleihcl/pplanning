# 来源：http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/

# Optimal solutions for symmetric TSPs

a280 : 2579 
ali535 : 202339 
att48 : 33522 
att532 : 86729 
bayg29 : 1610 
bays29 : 2020 
berlin52 : 7542 
bier127 : 118282 
brd14051 : 469385 
burma14 : 3323  30.8
ch130 : 6110 
ch150 : 6528 
d198 : 15780 
d493 : 35002 
d657 : 48912 
d1291 : 50801 
d1655 : 62128 
d2103 : 80450 
d15112 : 1573084 
d18512 : 645238
dantzig42 : 699 
eil51 : 426 
eil76 : 538 
eil101 : 629 
fl417 : 11861 
fl1400 : 20127 
fl1577 : 22249 
fl3795 : 28772 
fnl4461 : 182566 
gil262 : 2378  
gr96 : 55209 
gr120 : 6942 
gr137 : 69853 
gr202 : 40160 
gr229 : 134602 
gr431 : 171414 
gr666 : 294358  
kroA100 : 21282 
kroB100 : 22141 
kroC100 : 20749 
kroD100 : 21294 
kroE100 : 22068 
kroA150 : 26524 
kroB150 : 26130 
kroA200 : 29368 
kroB200 : 29437 
lin105 : 14379 
lin318 : 42029 
linhp318 : 41345 
nrw1379 : 56638 
p654 : 34643 
pa561 : 2763 
pcb442 : 50778 
pcb1173 : 56892 
pcb3038 : 137694 
pla7397 : 23260728 
pla33810 : 66048945 
pla85900 : 142382641 
pr76 : 108159 
pr107 : 44303 
pr124 : 59030 
pr136 : 96772 
pr144 : 58537 
pr152 : 73682 
pr226 : 80369 
pr264 : 49135 
pr299 : 48191 
pr439 : 107217 
pr1002 : 259045 
pr2392 : 378032 
rat99 : 1211 
rat195 : 2323 
rat575 : 6773 
rat783 : 8806 
rd100 : 7910 
rd400 : 15281 
rl1304 : 252948 
rl1323 : 270199 
rl1889 : 316536 
rl5915 : 565530 
rl5934 : 556045 
rl11849 : 923288 
st70 : 675 
swiss42 : 1273 
ts225 : 126643 
tsp225 : 3916 
u159 : 42080 
u574 : 36905 
u724 : 41910 
u1060 : 224094 
u1432 : 152970 
u1817 : 57201 
u2152 : 64253 
u2319 : 234256 
ulysses16 : 72
ulysses22 : 74 
usa13509 : 19982859 
vm1084 : 239297 
vm1748 : 336556 

# 无坐标信息，只有显式距离矩阵
brazil58 : 25395 
brg180 : 1950 
chn31 : 15377 
dsj1000 : 18660188
fri26 : 937 
gr17 : 2085 
gr21 : 2707 
gr24 : 1272 
gr48 : 5046
hk48 : 11461
oliver30 : 420
si175 : 21407 
si535 : 48450 
si1032 : 92650 

rand50 : 5553
rand75 : 7054
rand100 : 7891
rand200 : 10649
rand300 : 11865
rand400 : 14722
rand400b : 144595

# 其他参考数据

def ciyt0():
    citys = bm.array([
    [101.7400, 6.5600],
    [112.5300, 37.8700],
    [121.4700, 31.2300],
    [119.3000, 26.0800],
    [106.7100, 26.5700],
    [103.7300, 36.0300],
    [111.6500, 40.8200],
    [120.1900, 30.2600],
    [121.3000, 25.0300],
    [106.5500, 29.5600],
    [106.2700, 38.4700],
    [116.4000, 39.9000],
    [118.7800, 32.0400],
    [114.1700, 22.3200],
    [104.0600, 30.6700],
    [108.9500, 34.2700],
    [117.2000, 39.0800],
    [117.2700, 31.8600],
    [113.5400, 22.1900],
    [102.7300, 25.0400],
    [113.6500, 34.7600],
    [123.3800, 41.8000],
    [114.3100, 30.5200],
    [113.2300, 23.1600],
    [91.1100, 29.9700],
    [117.0000, 36.6500],
    [125.3500, 43.8800],
    [113.0000, 28.2100],
    [110.3500, 20.0200],
    [87.6800, 43.7700],
    [114.4800, 38.0300],
    [126.6300, 45.7500],
    [115.8900, 28.6800],
    [108.3300, 22.8400]
    ])
    return citys

def city_chn31():
    citys = bm.array([
        [1304, 2312],
        [3639, 1315],
        [4177, 2244],
        [3712, 1399],
        [3488, 1535],
        [3326, 1556],
        [3238, 1229],
        [4196, 1004],
        [4312, 790],
        [4386, 570],
        [3007, 1970],
        [2562, 1756],
        [2788, 1491],
        [2381, 1676],
        [1332, 695],
        [3715, 1678],
        [3918, 2179],
        [4061, 2370],
        [3780, 2212],
        [3676, 2578],
        [4029, 2838],
        [4263, 2931],
        [3429, 1908],
        [3507, 2367],
        [3394, 2643],
        [3439, 3201],
        [2935, 3240],
        [3140, 3550],
        [2545, 2357],
        [2778, 2826],
        [2370, 2975]
    ])
    return citys

def city_rand50():
    citys = bm.array([
        [475, 110],
        [29, 929],
        [755, 897],
        [698, 979],
        [871, 317],
        [535, 184],
        [548, 73],
        [594, 380],
        [233, 845],
        [881, 654],
        [200, 540],
        [9, 800],
        [526, 456],
        [765, 30],
        [992, 449],
        [659, 193],
        [938, 370],
        [233, 966],
        [692, 112],
        [680, 873],
        [589, 968],
        [553, 444],
        [106, 941],
        [959, 366],
        [273, 614],
        [568, 383],
        [661, 431],
        [824, 144],
        [191, 587],
        [464, 457],
        [959, 722],
        [823, 486],
        [259, 513],
        [977, 467],
        [794, 895],
        [243, 863],
        [802, 294],
        [811, 650],
        [954, 534],
        [300, 486],
        [665, 865],
        [648, 205],
        [645, 848],
        [29, 496],
        [98, 25],
        [344, 676],
        [735, 371],
        [924, 450],
        [313, 472],
        [407, 339]
    ])
    return citys

def city_oliver30():
    citys = bm.array([
        [5, 2, 99],
        [10, 4, 50],
        [6, 7, 64],
        [11, 13, 40],
        [12, 18, 40],
        [9, 18, 54],
        [8, 22, 60],
        [13, 24, 42],
        [14, 25, 38],
        [7, 25, 62],
        [3, 37, 84],
        [16, 41, 26],
        [4, 41, 94],
        [15, 44, 35],
        [17, 45, 21],
        [2, 54, 62],
        [1, 54, 67],
        [18, 58, 35],
        [30, 58, 69],
        [19, 62, 32],
        [24, 64, 60],
        [25, 68, 58],
        [23, 71, 44],
        [29, 71, 71],
        [28, 74, 78],
        [20, 82, 7],
        [22, 83, 46],
        [26, 83, 69],
        [27, 87, 76],
        [21, 91, 38]
    ])
    return citys

TSP_data = [
    #二维地图
    {
        "citys": ciyt0(),
        "num": 34,
    },
    {
        "citys": city_chn31(),
        "num": 31,
        "opt":15377,
    },
    {
        "citys": city_rand50(),
        "num": 50,
        "opt":5553,
    },
    #三维地图
    {
        "citys": city_oliver30(),
        "num": 30,
        "opt":420,
    },
]
